{
  "name": "Britescript",
  "scopeName": "source.britescript",
  "fileTypes": ["bs", "brite"],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#storage"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#types"
    },
    {
      "include": "#variables"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.britescript",
          "match": "//.*$"
        },
        {
          "name": "comment.block.britescript",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.britescript",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.britescript",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.britescript",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.britescript",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.britescript",
          "match": "\\b(struct|trait|impl|for|fn|let|const|if|else|match|return|import|export|from|as|pub|async|await|while|for|in|of|break|continue|try|catch|throw)\\b"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.numeric.britescript",
          "match": "\\b\\d+(\\.\\d+)?([eE][+-]?\\d+)?\\b"
        },
        {
          "name": "constant.language.britescript",
          "match": "\\b(true|false|null|undefined)\\b"
        }
      ]
    },
    "storage": {
      "patterns": [
        {
          "name": "storage.type.britescript",
          "match": "\\b(type|interface|enum)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.britescript",
          "match": "(=>|->|\\+|\\-|\\*|\\/|%|\\^|&|\\||!|~|=|<|>|\\?|:|\\.|,|;)"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "match": "\\bfn\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "captures": {
            "1": {
              "name": "entity.name.function.britescript"
            }
          }
        },
        {
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "captures": {
            "1": {
              "name": "entity.name.function.call.britescript"
            }
          }
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "match": "\\b(struct|trait|type|enum)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b",
          "captures": {
            "2": {
              "name": "entity.name.type.britescript"
            }
          }
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b",
          "name": "variable.other.britescript"
        }
      ]
    }
  }
}